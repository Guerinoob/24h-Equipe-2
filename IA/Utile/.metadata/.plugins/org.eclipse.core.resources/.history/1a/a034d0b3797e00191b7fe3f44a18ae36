package JeuCafe;
import java.util.*;

/**
 * 
 */
public class Ilot {

    private ArrayList<Parcelle> listeParcelle;


    /**
     * @param code
     */
    public Ilot(ArrayList<ArrayList<Integer>> code) {
        listeParcelle = new ArrayList<>();
        int lig = 0, parcelle = 0;
        char col = 'A';
        ArrayList<Integer> Case;
        for (ArrayList<Integer> ligne : code) {
            col = 0;
            for (Integer unit : ligne) {
                Case = dechiffreEnPuissanceDeDeux(unit);
                if (Case.get(0) == 0) {
                    listeParcelle.add(new Parcelle());
                    listeParcelle.get(parcelle).getListeUnite().add(new Unite(lig, col));

                }
                col++;
            }
            lig++;
        }
    }


    public static ArrayList<ArrayList<Integer>> convertirStringToInteger(String map) {
        ArrayList<ArrayList<Integer>> matrice = new ArrayList<>(new ArrayList<>());
        int ligne = -1, colonne = 0;
        final String delims = "[:|]+";
        String[] valeurs = map.split(delims);
        for (String valeur : valeurs) {

            if (ligne == -1 || colonne == 9) {
                matrice.add(new ArrayList<>());
            }

            ligne = matrice.size() - 1;

            matrice.get(ligne).add(Integer.parseInt(valeur));

            colonne = matrice.get(ligne).lastIndexOf(valeur);

            System.out.println(ligne + ";" + colonne + ";" + matrice.size() +";"+ matrice.get(ligne).get(colonne));


        }

        return matrice;
    }

    /**
     * @return
     */
    public Ilot getIlot() {
        // TODO implement here
        return null;
    }


    public ArrayList<Integer> dechiffreEnPuissanceDeDeux(int nb) {
        //nb doit Ãªtre >= 1

        ArrayList<Integer> listePuissance = new ArrayList<Integer>();

        if (puissanceProche(nb) == 0) {
            listePuissance.add(puissanceProche(nb));
            return listePuissance;
        } else {
            int pProche;
            while ((pProche = puissanceProche(nb)) != 0) {
                listePuissance.add(pProche);
                nb = (int) (nb - Math.pow(2, pProche));

            }
            if (nb == 1) {
                listePuissance.add(pProche);
            }
            return listePuissance;
        }
    }

    public int puissanceProche(int nb) {
        int p2 = 1;
        int i = 0;

        while (p2 * 2 < nb) {
            p2 = p2 * 2;
            i++;
        }

        if (p2 * 2 == nb) {
            i = i + 1;
            return i;
        } else {
            return i;
        }
    }
    

    
    public int getVoisinUnite(Couleur couleur, int ligne, int colonne)
    {
    	if(ligne < 0  ||  ligne > 9  ||  colonne < 0  ||  colonne > 9)
    	{
    		return 0;
    	}
    	else if(!this.getUnite(ligne,colonne).occupee())
    	{
    		return 0;
    	}
    	else if(this.getUnite(ligne,colonne).getGraine().getCouleur() != couleur)
    	{
    		return 0;
    	}
    	else
    	{
    		
    	}
    }
    
    public int comptePointProximite(Couleur couleur)
    {
    	Ilot illotTmp = new Ilot(this);
    	for(int ligne=0 ; ligne<10 ; ligne++)
    	{
    		for(int colonne=0 ; colonne<10 ; colonne++)
    		{
    			int cpt = this.getVoisinUnite(couleur,ligne,colonne,illotTmp);
    		}
    	}
    }

    public int pointTheorique(Couleur couleur)
    {
    	int point = 0;
    	for(Parcelle parcelle : this.getParcelle())
    	{
    		if(parcelle.getProprietaire() == couleur)
    		{
    			point += parcelle.getTaille();
    		}
    	}
    	
    	point += comptePointProximite(couleur);
    	return point;
    }
}